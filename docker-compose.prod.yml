version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: vibescan-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5433:5432"  # 호스트에서 접근 가능하도록 포트 노출
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibescan-network
    restart: unless-stopped

  # Redis for caching and queue
  redis:
    image: redis:7-alpine
    container_name: vibescan-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"  # 호스트에서 접근 가능하도록 포트 노출
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibescan-network
    restart: unless-stopped

  # Nuclei scanner
  nuclei:
    image: projectdiscovery/nuclei:latest
    container_name: vibescan-nuclei
    entrypoint: ["/bin/sh", "-c"]
    command: ["sleep infinity"]
    networks:
      - vibescan-network
    volumes:
      - nuclei_templates:/root/nuclei-templates
    restart: unless-stopped

  # OWASP ZAP scanner
  zap:
    image: ghcr.io/zaproxy/zaproxy:stable
    container_name: vibescan-zap
    entrypoint: ["/bin/sh", "-c"]
    command: ["sleep infinity"]
    healthcheck:
      disable: true
    networks:
      - vibescan-network
    restart: unless-stopped

  # Backend API - 서버에서 직접 실행 (Docker 제외)
  # 백엔드는 ~/vibescan/backend 폴더에서 직접 실행하세요
  # cd ~/vibescan/backend && npm run start:prod

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: vibescan-nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: ${DOMAIN}
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot-www:/var/www/certbot
    networks:
      - vibescan-network
    restart: unless-stopped

  # Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot:latest
    container_name: vibescan-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot-www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - vibescan-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  nuclei_templates:

networks:
  vibescan-network:
    driver: bridge
