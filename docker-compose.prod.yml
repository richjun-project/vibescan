version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: vibescan-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibescan-network
    restart: unless-stopped

  # Redis for caching and queue
  redis:
    image: redis:7-alpine
    container_name: vibescan-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibescan-network
    restart: unless-stopped

  # Nuclei scanner
  nuclei:
    image: projectdiscovery/nuclei:latest
    container_name: vibescan-nuclei
    entrypoint: ["/bin/sh", "-c"]
    command: ["sleep infinity"]
    networks:
      - vibescan-network
    volumes:
      - nuclei_templates:/root/nuclei-templates
    restart: unless-stopped

  # OWASP ZAP scanner
  zap:
    image: ghcr.io/zaproxy/zaproxy:stable
    container_name: vibescan-zap
    entrypoint: ["/bin/sh", "-c"]
    command: ["sleep infinity"]
    networks:
      - vibescan-network
    restart: unless-stopped

  # Trivy scanner
  trivy:
    image: aquasec/trivy:latest
    container_name: vibescan-trivy
    entrypoint: ["/bin/sh", "-c"]
    command: ["sleep infinity"]
    networks:
      - vibescan-network
    volumes:
      - trivy_cache:/root/.cache/trivy
    restart: unless-stopped

  # Gitleaks scanner
  gitleaks:
    image: zricethezav/gitleaks:latest
    container_name: vibescan-gitleaks
    entrypoint: ["/bin/sh", "-c"]
    command: ["sleep infinity"]
    networks:
      - vibescan-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vibescan-backend
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      KAKAO_CLIENT_SECRET: ${KAKAO_CLIENT_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      TOSS_SECRET_KEY: ${TOSS_SECRET_KEY}
      TOSS_CLIENT_KEY: ${TOSS_CLIENT_KEY}
      FRONTEND_URL: https://${DOMAIN}
      NUCLEI_CONTAINER: nuclei
      ZAP_CONTAINER: zap
      TRIVY_CONTAINER: trivy
      GITLEAKS_CONTAINER: gitleaks
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nuclei:
        condition: service_started
      zap:
        condition: service_started
      trivy:
        condition: service_started
      gitleaks:
        condition: service_started
    networks:
      - vibescan-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vibescan-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://${DOMAIN}/api
    depends_on:
      - backend
    networks:
      - vibescan-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: vibescan-nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: ${DOMAIN}
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot-www:/var/www/certbot
    networks:
      - vibescan-network
    restart: unless-stopped

  # Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot:latest
    container_name: vibescan-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot-www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - vibescan-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  nuclei_templates:
  trivy_cache:

networks:
  vibescan-network:
    driver: bridge
